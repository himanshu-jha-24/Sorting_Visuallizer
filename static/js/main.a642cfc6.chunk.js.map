{"version":3,"sources":["Algorithms/Utility.js","Algorithms/QuickSort.js","Algorithms/MergeSort.js","SortVisualizer/SortVisualizer.js","Algorithms/InsertionSort.js","Algorithms/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["swap","arr","index1","index2","temp","getQuickSortAnimations","copy","animations","quickSortHelper","length","left","right","part","i","j","pivot","push","partition","getMergeSortAnimations","len","mergeSortHelper","Array","aux","mid","Math","floor","k","merge","SORTED_COLOUR","SortVisualizer","props","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","containerRef","useRef","animateArrayUpdate","forEach","index","comparison","swapped","setTimeout","prevArr","newValue","newArr","animateArrayAccess","arrayBars","current","children","arrayBarStyle","style","backgroundColor","animateSortedArray","DELAY","resetArrayColour","className","ref","map","barHeight","height","width","onClick","shuffle","getInsertionSortAnimations","getBubbleSortAnimations","randomIndex","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a642cfc6.chunk.js","sourcesContent":["export function swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n  }","import { swap } from './Utility';\n\nexport function getQuickSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  quickSortHelper(copy, 0, copy.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, left, right, animations) {\n  if (right <= left) return;\n  const part = partition(arr, left, right, animations);\n  quickSortHelper(arr, left, part, animations);\n  quickSortHelper(arr, part + 1, right, animations);\n}\n\nfunction partition(arr, left, right, animations) {\n  let i = left;\n  let j = right + 1;\n  const pivot = arr[left];\n  while (true) {\n    while (arr[++i] <= pivot) {\n      if (i === right) break;\n      animations.push([[i], false]);\n    }\n    while (arr[--j] >= pivot) {\n      if (j === left) break;\n      animations.push([[j], false]);\n    }\n    if (j <= i) break;\n    animations.push([[i, arr[j]], true]);\n    animations.push([[j, arr[i]], true]);\n    swap(arr, i, j);\n  }\n  animations.push([[left, arr[j]], true]);\n  animations.push([[j, arr[left]], true]);\n  swap(arr, left, j);\n  return j;\n}","export function getMergeSortAnimations(arr) {\n    const copy = [...arr];\n    const len = copy.length;\n    const aux = Array(len);\n    const animations = [];\n    mergeSortHelper(copy, aux, 0, len - 1, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(arr, aux, left, right, animations) {\n    if (right <= left) return;\n    const mid = left + Math.floor((right - left) / 2);\n    mergeSortHelper(arr, aux, left, mid, animations);\n    mergeSortHelper(arr, aux, mid + 1, right, animations);\n    merge(arr, aux, left, mid, right, animations);\n  }\n  \n  function merge(arr, aux, left, mid, right, animations) {\n    for (let i = left; i <= right; i++) aux[i] = arr[i];\n    let i = left;\n    let j = mid + 1;\n    for (let k = left; k <= right; k++) {\n      if (i > mid) {\n        animations.push([[j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else if (j > right) {\n        animations.push([[i], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      } else if (aux[j] < aux[i]) {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[j]], true]);\n        arr[k] = aux[j++];\n      } else {\n        animations.push([[i, j], false]);\n        animations.push([[k, aux[i]], true]);\n        arr[k] = aux[i++];\n      }\n    }\n  }","import React, { useState, useRef } from 'react';\nimport './SortVisualizer.css';\nimport { getQuickSortAnimations } from '../Algorithms/QuickSort';\nimport { getInsertionSortAnimations } from '../Algorithms/InsertionSort';\nimport { getMergeSortAnimations } from '../Algorithms/MergeSort';\nimport { getBubbleSortAnimations} from '../Algorithms/BubbleSort'\n\nconst ARR_LEN = 100;\nconst MIN_NUM = 5;\nconst MAX_NUM = 80;\nconst DELAY = 5;\nconst ACCESSED_COLOUR = 'turquoise';\nconst SORTED_COLOUR = 'green';\n\nexport default function SortVisualizer(props) {\n  const [arr, setArr] = useState([]);\n  const [isSorting, setIsSorting] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n  const containerRef = useRef(null);\n\n//   useEffect(initialiseArray, []);\n\n  function initialiseArray() {\n    if (isSorting) return;\n    if (isSorted) resetArrayColour();\n    setIsSorted(false);\n    const arr = [];\n    for (let i = 0; i < ARR_LEN; i++) {\n      arr.push((MAX_NUM - MIN_NUM) * (i / ARR_LEN) + MIN_NUM);\n    }\n    shuffle(arr);\n    setArr(arr);\n  }\n\n  function mergeSort() {\n    const animations = getMergeSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function insertionSort() {\n    const animations = getInsertionSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function quickSort() {\n    const animations = getQuickSortAnimations(arr);\n    animateArrayUpdate(animations);\n  }\n\n  function bubbleSort() {\n      const animations=getBubbleSortAnimations(arr);\n      animateArrayUpdate(animations);\n  }\n  function animateArrayUpdate(animations) {\n    if (isSorting) return;\n    setIsSorting(true);\n    animations.forEach(([comparison, swapped], index) => {\n      setTimeout(() => {\n        if (!swapped) {\n          if (comparison.length === 2) {\n            const [i, j] = comparison;\n            animateArrayAccess(i);\n            animateArrayAccess(j);\n          } else {\n            const [i] = comparison;\n            animateArrayAccess(i);\n          }\n        } else {\n          setArr((prevArr) => {\n            const [k, newValue] = comparison;\n            const newArr = [...prevArr];\n            newArr[k] = newValue;\n            return newArr;\n          });\n        }\n      }, index * DELAY);\n    });\n    setTimeout(() => {\n      animateSortedArray();\n    }, animations.length * DELAY);\n  }\n\n  function animateArrayAccess(index) {\n    const arrayBars = containerRef.current.children;\n    const arrayBarStyle = arrayBars[index].style;\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\n    }, DELAY);\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = '';\n    }, DELAY * 2);\n  }\n\n  function animateSortedArray() {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arrayBars.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      setTimeout(\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\n        i * DELAY,\n      );\n    }\n    setTimeout(() => {\n      setIsSorted(true);\n      setIsSorting(false);\n    }, arrayBars.length * DELAY);\n  }\n\n  function resetArrayColour() {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arr.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      arrayBarStyle.backgroundColor = '';\n    }\n  }\n\n  return (\n    <div className=\"visualizer-container\">\n      <div className=\"array-container\" ref={containerRef}>\n        {arr.map((barHeight, index) => (\n          <div\n            className=\"array-bar\"\n            style={{\n              height: `${barHeight}vmin`,\n              width: `${100 / ARR_LEN}vw`,\n            }}\n            key={index}\n          ></div>\n        ))}\n      </div>\n      <footer className=\"app-footer\">\n        <ul>\n          <li>\n            <button className=\"app-button\" onClick={initialiseArray}>\n              Create new array\n            </button>\n          </li>\n          <li>\n            <button className=\"app-button\" onClick={mergeSort}>\n              Merge sort\n            </button>\n          </li>\n          <li>\n            <button className=\"app-button\" onClick={insertionSort}>\n              Insertion sort\n            </button>\n          </li>\n          <li>\n            <button className=\"app-button\" onClick={quickSort}>\n              Quick sort\n            </button>\n          </li>\n          <li>\n            <button className=\"app-button\" onClick={bubbleSort}>\n              Bubble sort\n            </button>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n}\n\nconst shuffle = (arr) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    const temp = arr[i];\n    arr[i] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\n};","import { swap } from \"./Utility\";\n\nexport function getInsertionSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  for (let i = 1; i < copy.length; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      animations.push([[j, j + 1], false]);\n      if (copy[j + 1] < copy[j]) {\n        animations.push([[j, copy[j + 1]], true]);\n        animations.push([[j + 1, copy[j]], true]);\n        swap(copy, j, j + 1);\n      } else break;\n    }\n  }\n  return animations;\n}","import {swap} from './Utility'\n\nexport function getBubbleSortAnimations(arr){\n    const copy=[...arr]\n    const animations=[]\n\n    for(let i=0;i<copy.length;i++){\n        for(let j=0;j<copy.length-i-1;j++){\n            animations.push([[j, j + 1], false]);\n      if (copy[j + 1] < copy[j]) {\n        animations.push([[j, copy[j + 1]], true]);\n        animations.push([[j + 1, copy[j]], true]);\n        swap(copy, j, j + 1);\n      } \n            }\n          }\n          return animations;\n        }","import React from \"react\";\nimport SortVisualizer from \"./SortVisualizer/SortVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}